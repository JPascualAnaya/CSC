Readme file for script draw_loci.pl
Par Engstrom 2006-06-19

The draw_loci.pl script creates images of genomic features at single loci or multiple aligned loci. It uses the same graphics modules as the comparative genome browser (cgb.pl) included in AT. Currently the following drawing modes are implemented:

1. Single locus
Generates an image of a single locus, for which coordinates are given on the commandline. The image can be generated in png or svg formats. The other modes only support png format.

2. One reference locus, and loci from one assembly aligned to it
Generates an image of one reference locus for which coordinates are given on the commandline. In addition, loci that align with the reference locus are shown. The assembly from which these non-reference loci are retrieved is given on the commandline. The alignments used are net alignments, which are retrieved from the AT database for the reference assembly. These alignments are nonredundant with respect to reference assembly. The script groups the alignments by their location in the non-reference assembly. The loci are shown in the order given on the command line. If the reference locus is specificed first, it is shown on top, followed by the locus in the non-reference assembly that aligns with most of the reference locus. Regions aligned between these two loci are shaded gray and connected by black polygons (dark red polygons indicate inversions). Additional (nonsyntenic) loci aligned to the reference locus are shown below, with aligned regions shaded green in these loci and the reference locus.

3. Two reference loci, and loci aligned to them
This mode is invoked if three loci are given on the commandline, and coordinates (reference loci) are specified for two of them. Shown between the two reference loci is the region from the non-reference assembly that aligns best with the first reference locus. Unless that region also aligns with the second reference locus, the region that aligns best with the second reference locus is also shown between the two reference loci. Regions aligned between the reference loci and the adjacently displayed loci are shaded gray, and connected by black polygons (or dark red polygons for inversions). Any additional (nonsyntenic) loci from the non-reference assembly aligned to the first reference locus are shown above it. Correspondingly, any nonsyntenic loci aligned to the second reference locus are shown below it. Green polygons (or brownish green for inversions) indicate regions aligned between reference loci and adjacently displayed nonsyntenic loci.

4. One reference locus, and loci from two assemblies aligned to it
This mode is invoked if three assemblies are given on the commandline but coordinates (reference locus) are only specified for one of the assemblies. The reference locus is shown in the middle, and aligning loci from the other two assemblies are shown above and below it, respectively.

Commandline syntax
------------------

Usage:
perl draw_loci.pl [options] config-file [assembly1:[region1]] [assembly2:[region2]] [assembly3:[region3]] out-file

Regions should be specified as chr:start-end.

Options:
 -f png|svg       Output format (default png).
                  Note: svg output is only implemented for single loci,
                  not multiple aligned loci
 -w <width>       Width of (largest) reference region in pixels
 -c <height>      Height of connector polygons in pixels
 -s <nr>          Max number of secondary (non-reference) panels to show


Configuration file format
-------------------------

The name of a vaild configuration file must be given on the command line. Please see the file draw_loci.conf in this directory for an example.

Each database server that the script should be able connect to used must be specified by an sqlConnection line:

sqlConnection <name> <host>[:<port>] [<user> [<pass>]]

Here <name> is symbolic name for the connection and <host> is the name of the a host running a MySQL server. The other fields are optional, as indicated by the brackets.

Each genome assembly that the script should be able to display must be specified by an assembly block. An assembly block begins with a line giving an id for the assembly:

assembly <id>

Note that the assembly id must match the assembly id used when importing net alignments to AT databases. The assembly line should be followed by several lines giving details about where to find data for the assembly. A genome sequence assembly database must be specified in one of three ways:

seq_db <dBName> <sqlConnection>
seq_2bit <twoBitFile>
seq_nib <nibDir>

Here
<dBName> is the name of an AT::DB::GenomeAssembly database,
<sqlConnection> is the symbolic name for a database connection defined earlier in the configuration-file,
<twoBitFile> is the filename (including path, if the file is not in the current directory) of a .2bit file with the assembly sequence, and
<nibDir> is the name of a directory containing .nib files with the assembly sequence.
(Note: I have only tested the script with .2bit files, but all of these directives should work.)

An AT::DB::GenomeAlignment / AT::DB::GenomeMapping database for the assembly must be given: 

AT <dbname> <sqlConnection>

This AT database should contain net alignments against other assemblies that the current assembly is to be compared against. (Net alignments can be loaded into the database with the script axt2sql.pl.) Although an AT database should only be needed if aligned loci are to be displayed, currently it is required for all assemblies in the config file.

The AT database may also contain features that are to be shown. For the script to retrieve features from the database, each feature track must be specified with a trackTable line:

trackTable <id> <tableName> <tableFormat> <glyph> <bgcolor> <fgcolor> <enable>

Here,
<id> is a label for the track; this label will be shown in the generated images
<tableName> is the name of a table in the AT database. There are two special names: mrna and est. These
names cause mRNA and EST mappings loaded with the mapping2sql.pl script to be displayed (note that for these special names the corresponding tables are not called mrna and est, respectively).
<tableFormat> gives the format of the table. Valid formats are:
  simple        table with columns chrom, chromStart and chromEnd
  simpleBinned  table with columns bin, chrom, chromStart and chromEnd
  gene          table with columns name, chrom, txStart, txEnd, strand,
                                   exonCount, exonStarts and exonEnds 
                        or columns name, chrom, chromStart, chromEnd, strand,
                                   blockCount, chromStarts and blockSizes
  refGene       table in the UCSC refGene table format
  knownGene     table in the UCSC knownGene table format; for this to work
                the UCSC table kgXref must also be present
  psl           table in psl format
  pslProtToDna  table in psl format with blockSizes counted in amino acids
  rmsk          table in UCSC rmsk format (for RepeatMasker track)
Format names can be suffixed with "Split" (e.g. "simpleSplit"), indicating the there is one table per chromosome.
<glyph>    The Bio::Graphics glyph that should be used to draw features from the table.
<bgcolor>  Foregound color.
<fgcolor>  Background color.
<enable>   Either 1 or 0, indicating whether the track should be shown or not.

Features for the assembly can also be read from files. Each file that are to be used must be specified by a trackFile line:

trackFile <id> <filename> <fileformat> <glyph> <bgcolor> <fgcolor> <enable>

The format of trackFile lines is analogous to that of trackTable lines. Currently, the only acceted format is bed. See the UCSC Genome Bioinformatics site for at description of the bed format.


Usage examples
--------------

These examples should work with the configuration file in this directory.

Zebrafish pax6a locus:
perl draw_loci.pl draw_loci.conf DR_MAR06:chr25:17604429-17625136 out.png

Zebrafish pax6a locus aligned to human:
perl draw_loci.pl draw_loci.conf DR_MAR06:chr25:17604429-17625136 HS_MAR06 out.png

Zebrafish pax6a and pax6b loci aligned to human:
perl draw_loci.pl draw_loci.conf DR_MAR06:chr25:17604429-17625136 DR_MAR06:chr7:14062327-14155499 HS_MAR06 out.png

Zebrafish hoxaa and hoxab loci aligned to human:
perl draw_loci.pl draw_loci.conf DR_MAR06:chr19:13904070-13954166 DR_MAR06:chr16:21167724-21201838 HS_MAR06 out.png

The same, without nonsyntenic loci:
perl draw_loci.pl -s1 draw_loci.conf DR_MAR06:chr19:13904070-13954166 DR_MAR06:chr16:21167724-21201838 HS_MAR06 out.png


To do
-----

SVG output for aligned loci (currently only implemented for single loci).

Highlight aligned features. Which type of features (e.g. exons, CNEs) that are highlighted should be configurable.

Highlight regions/features that align between three loci.

Increase resolution of alignment display (currenly some gaps are not shown) and speed of alignment retrieval (we don't need to get DNA sequences, as is currently done).

Keyword search in Comparative Browser

//
